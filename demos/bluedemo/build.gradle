if (!config.isAssembling) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        if (!config.isAssembling) {
            applicationId "jason.jan.demos.bluedemo"
        } else {
            //集成模式下Arouter的配置，用于组件间通信的实现
            javaCompileOptions {
                annotationProcessorOptions {
                    arguments = [moduleName: project.getName()]
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            //控制两种模式下的资源和代码配置情况
            if (!config.isAssembling) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下排除debug文件夹中的所有Java文件,就是说没必要打包
                java {
                    exclude 'debug/**'
                }
            }
        }
    }

}

dependencies {

    implementation project(":common:commonlib")

    implementation google.appcompat
    implementation google.constraintlayout
    implementation google.kotlin_stdlib_jdk7
    implementation google.kotlin_stdlib

}
